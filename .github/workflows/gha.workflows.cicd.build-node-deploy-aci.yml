name: Node.js Build with docker to aci

on:
  workflow_call:
    inputs:
      image-name:
        type: string
        description: the name of the image
        required: true
      resource-group:
        type: string
        description: the name of the resource group
        required: true
      acr-registry:
        type: string
        description: the name of the acr registry
        required: true
      tag:
        type: string
        description: the tag of the image
        required: false
        default: latest
      artifact-name:
        type: string
        description: the name of the artifact
        required: false
        default: my-app
      dockerfile:
        type: string
        description: the name of the docker file
        required: false
        default: Dockerfile
    secrets:
      AZURE_CREDENTIALS:
          required: true

run-name: Build and deploy to ACI by @${{ github.actor }}

jobs:
  build:
    name: Build Node.js application
    runs-on: ubuntu-latest
    steps:
    - name: checkout code
      uses: actions/checkout@v3
    - uses: ./.github/actions/build-node
      with:
        artifactName: ${{ inputs.artifact-name }}
        nodeVersion: 16.x

  build-docker:
    name: Build Docker Image with ACR
    runs-on: ubuntu-latest
    needs: build
    outputs:
      image-name: ${{ steps.acr-build.outputs.image-ref }}
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name:  ${{ inputs.artifact-name }}
        path: dist
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: ACR Build
      id: acr-build
      uses: azure/CLI@v1
      with:
        inlineScript: |
          echo "image-tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          echo "Using tags ${{ inputs.tag }}"
          echo "image-ref=${{ inputs.acr-registry }}.azurecr.io/${{ inputs.image-name }}:${{ inputs.tag }}" >> $GITHUB_OUTPUT
          az acr build -r ${{ inputs.acr-registry }} -f ${{ inputs.dockerfile }} -t "${{ inputs.image-name }}:${{ inputs.tag }}" ./

  deploy-container-instance:
    name: Deploy to ACI
    runs-on: ubuntu-latest
    needs: build-docker
    steps:
    - uses: actions/checkout@v3
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: ACI Build and Push
      id: aci
      uses: azure/CLI@v1
      with:
        inlineScript: |
          cd infra
          guidLowerDashed=$(cat /proc/sys/kernel/random/uuid)
          guidLower=${guidLowerDashed//"-"/""}
          deploy_name="${GITHUB_REPOSITORY#*/}_$guidLower"
          deployment=$(az deployment group create --name $deploy_name --resource-group ${{ inputs.resource-group }} --template-file main.bicep --parameters image=${{ needs.build-docker.outputs.image-name }} acrName=${{ inputs.acr-registry }} --query properties.outputs)
          
          ipValue=$(echo "$deployment" | jq -r '.containerIp.value')
          echo "You can access the container [here](http:\/\/$ipValue\/)" >> $GITHUB_STEP_SUMMARY

jobs:
  build-version-number:
    name: Generate and tag build number
    runs-on: ubuntu-latest
    outputs: 
      version: ${{ steps.get-version.outputs.version }}
      non-semver-version: ${{ steps.get-non-semver-version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Git Semantic Version
        id: get-version
        uses: PaulHatch/semantic-version@v5.2.1
      - name: create non semver version prefix
        id: get-non-semver-version
        run: |
          SEMVER="${{ steps.get-version.outputs.version }}"
          SEMVER=${SEMVER//"-"/"_"}
          SEMVER=${SEMVER//"+"/"_"}
          FULL="${GITHUB_REPOSITORY#*/}_$SEMVER"
          echo "version=$FULL" >> "$GITHUB_OUTPUT"
  
  docker-lint-files:
    name: Run docker linter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Hadolint Action - Run linter
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ inputs.dockerfile }}
  
  infrastructure-lint-files:
    name: Run Bicep linter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Bicep linter
        run: az bicep build --file infra/main.bicep
  
  build-app:
    name: Build Node.js application
    runs-on: ubuntu-latest
    needs: build-version-number
    steps:
    - name: checkout code
      uses: actions/checkout@v3
    - uses: ./.github/actions/build-node
      with:
        artifactName: ${{ inputs.artifact-name }}
        nodeVersion: 16.x

  build-docker:
    name: Build Docker Image with ACR
    runs-on: ubuntu-latest
    needs: [ build-app, docker-lint-files, build-version-number ]
    outputs:
      image-name: ${{ steps.acr-build.outputs.image-ref }}
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name:  ${{ inputs.artifact-name }}
        path: dist
    - name: login with credentials 
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: ACR Build
      id: acr-build
      uses: azure/CLI@v1
      with:
        inlineScript: |
          echo "image-tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          echo "Using tags ${{ inputs.tag }}"
          echo "image-ref=${{ inputs.acr-registry }}.azurecr.io/${{ inputs.image-name }}:${{ inputs.tag }}" >> $GITHUB_OUTPUT
          az acr build -r ${{ inputs.acr-registry }} -f ${{ inputs.dockerfile }} -t "${{ inputs.image-name }}:${{ inputs.tag }}" ./

  validate-deployment:
    name: Validate the deployment
    runs-on: ubuntu-latest
    needs: [ infrastructure-lint-files, build-docker, build-version-number ]
    steps:
    - uses: actions/checkout@v3
    - name: login with credentials 
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - uses: azure/arm-deploy@v1
      name: Validate build against resource group
      with:
        deploymentName: ${{ needs.build-version-number.outputs.non-semver-version }}
        resourceGroupName: ${{ inputs.resource-group }}
        template: ./infra/main.bicep
        parameters: image=${{ needs.build-docker.outputs.image-name }} acrName=${{ inputs.acr-registry }}
        deploymentMode: Validate
  
  deploy-container-instance:
    name: Deploy to ACI
    runs-on: ubuntu-latest
    needs: [ build-docker, infrastructure-lint-files, validate-deployment, build-version-number ]
    steps:
    - uses: actions/checkout@v3
    - name: login with credentials 
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - uses: azure/arm-deploy@v1
      id: aci
      name: Deploy against resource group
      with:
        deploymentName: ${{ needs.build-version-number.outputs.non-semver-version }}
        resourceGroupName: ${{ inputs.resource-group }}
        template: ./infra/main.bicep
        parameters: image=${{ needs.build-docker.outputs.image-name }} acrName=${{ inputs.acr-registry }}
        failOnStdErr: false
    - run: echo "You can access the container [here](http:\/\/${{ steps.aci.outputs.containerIp }}\/)" >> $GITHUB_STEP_SUMMARY
